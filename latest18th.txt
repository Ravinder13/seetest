using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Functions;
using ExperiTest;
using System.IO;
using experitestClient;
using System.Collections;



namespace PoCStability
{
    [TestClass]
    public class Stability
    {	
	
	//This is second change
        private string host = "localhost";
        private int port = Convert.ToInt16(GlobalHelper.InputFromXML("port"));
        private string output = @"..\Automation_Results.html";
        private string adboutput = "LexADB.txt";
        Client client = null;
        //Client client2 = null;
        //Client client3 = null;

        private string GroupName;

        String t1 = GlobalHelper.InputFromXML("DeviceName1");
        String t2 = GlobalHelper.InputFromXML("DeviceName2");
        String t3 = GlobalHelper.InputFromXML("DeviceName3");

        String Target1_Number = GlobalHelper.InputFromXML("Target1_Number");
        String Target2_Number = GlobalHelper.InputFromXML("Target2_Number");
        String Target3_Number = GlobalHelper.InputFromXML("Target3_Number");
        string password_ds = GlobalHelper.InputFromXML("password_ds");


        String Target1_Name = GlobalHelper.InputFromXML("Target1_Name");
        String Target2_Name = GlobalHelper.InputFromXML("Target2_Name");
        String Target3_Name = GlobalHelper.InputFromXML("Target3_Name");


        int HCalls = 13;
        int GCalls = 13;
        int ACalls = 3;
        string gsmCall = "6366916388";
        int SFDCalls = 3;
        int MCVideoCalls = 3;

        private TestContext testContextInstance;
        private string projectBaseDirectory = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\workspace\\project2";
        Call libFunctions = new Call();
        BravoPToX libFunctionsPTX = new BravoPToX();
        LMR lmr = new LMR();
        BravoPToX bravo = new BravoPToX();
        Favorite fav = new Favorite();
        DeviceSharingTest ds = new DeviceSharingTest();
        Activation act = new Activation();
        UserRolesAndProfilesTest upm = new UserRolesAndProfilesTest();
        MCVideoTest mcv = new MCVideoTest();
        Settings set = new Settings();
        ContactManager com = new ContactManager();
        History his = new History();





        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        //[TestInitialize()]
        public void SetupTestSyam()
        {

            try
            {
                client = new Client(host, port, true);

                //Helper.Instance().AddHTMLRow(TestContext.TestName, "In Progress", DateTime.Now, DateTime.Now);
                //failureanalysis log = new failureanalysis();
                client.SetProjectBaseDirectory(projectBaseDirectory);
                client.SetReporter("xml", "reports", TestContext.TestName);

                GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
                client.SetDevice(t1);
                client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                //act.LoginWithCredentials(client, Target1_Number, password_ds);

                GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
                client.SetDevice(t2);
                client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                //act.LoginWithCredentials(client, Target2_Number, password_ds);

                GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
                client.SetDevice(t3);
                client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                //act.LoginWithCredentials(client, Target3_Number, password_ds);




            }
            catch (Exception ex)
            {
                Helper.Instance().Wait(1000);
            }
        }


        [TestInitialize()]
        public void SetupTest()
        {
            Activation.stTime = DateTime.Now;
            GlobalHelper.errorMsg = "";
            try
            {
                failureanalysis log = new failureanalysis();
                client = new Client(host, port);
                client.SetProjectBaseDirectory(projectBaseDirectory);
                client.SetReporter("xml", "reports", TestContext.TestName);

                client.SetDevice(t1);
                GlobalHelper.TargetType = t1;
                if (t1.Contains("adb"))
                {
                    client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                }
                else
                {
                    client.Launch(GlobalHelper.InputFromXML("IosPackageName"), true, false);
                    client.SetProperty("split.view.dump.ios", "true");
                }

                client.SetDevice(t2);
                GlobalHelper.TargetType = t2;
                if (t2.Contains("adb"))
                {
                    client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                }
                else
                {
                    client.Launch(GlobalHelper.InputFromXML("IosPackageName"), true, false);
                    client.SetProperty("split.view.dump.ios", "true");
                }

                client.SetDevice(t3); ;
                GlobalHelper.TargetType = t3;
                if (t3.Contains("adb"))
                {
                    client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                }
                else
                {
                    client.Launch(GlobalHelper.InputFromXML("IosPackageName"), true, false);
                    client.SetProperty("split.view.dump.ios", "true");
                }
                Console.WriteLine("-------------------------------------------------");
                Console.WriteLine("Start Logging Device Started");
                client.SetDevice(t1);
                GlobalHelper.TargetType = t1;
                client.StartLoggingDevice("C:\\Automation\\Logs\\" + TestContext.TestName + ".txt");
                GlobalHelper.starttime = log.getcurrenttime();
                client.SetSpeed(GlobalHelper.InputFromXML("ExecutionSpeed"));

            }
            catch (Exception ex)
            {
                Helper.Instance().Wait(60000);
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_000()
        {
            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
            act.LoginWithCredentials(client, Target3_Number, password_ds);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
            act.LoginWithCredentials(client, Target2_Number, password_ds);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
            act.LoginWithCredentials(client, Target1_Number, password_ds);
        }

        #region HSCalls
        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_001()
        {
            client.SetDevice(t1);


            client.Sleep(60000);
            libFunctions = new Call();
            LMR lmr = new LMR();


            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        Console.WriteLine("Called to the::setup1target2::CallFirstContact::i Value is " + i);
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFirstContact(client);
                        Console.WriteLine("Called to the::setup1target3::CallSecondContact::i Value is " + i);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_002()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0)) {

                    fav.Goto_FavoritesContact(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        client.ElementSendText("WEB", GlobalHelper.GetObject("Search"), 0, Target2_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        Console.WriteLine("Called to the::setup1target2::CallFirstContact::i Value is " + i);

                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        client.ElementSendText("WEB", GlobalHelper.GetObject("Search"), 0, Target3_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t3);
                        Console.WriteLine("Called to the::setup1target3::CallSecondContact::i Value is " + i);

                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }

            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_003()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.Goto_History(client);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        his.SearchHistory(client, Target2_Name);
                        libFunctions.CallFromHistoryDetail(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        his.SearchHistory(client, Target3_Name);
                        libFunctions.CallFromHistoryDetail(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_004()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.Goto_History(client);

                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFromHistoryDetail(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFromHistoryDetail(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);

                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_005()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.Goto_History(client);

                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFromHistoryDetail(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            //client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                            client.Sleep(10000);
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFromHistoryDetail(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            //client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                            client.Sleep(10000);

                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_006()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0)) {
                    lmr.GotoContactsList(client);

                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFirstContact(client);
                        client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                        client.SetDevice(t2);
                        client.Sleep(4000);
                        libFunctions.AcceptVideoCall(client);
                        client.ClickCoordinate(10, 800, 1);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        }
                        libFunctions.ExpandVideoCall(client);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFirstContact(client);
                        client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                        client.SetDevice(t3);
                        libFunctions.AcceptVideoCall(client);
                        client.ClickCoordinate(10, 800, 1);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            //client.Sleep(10000);
                        }
                        libFunctions.ExpandVideoCall(client);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);

                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_007()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }
                        client.SetDevice(t3);
                        client.Sleep(5000);

                        libFunctions.OriginateGSMCall(client, gsmCall);
                        client.SetDevice(t1);
                        libFunctions.waitForIncomingGSMCall(client, 20000);
                        libFunctions.answerGSMCall(client, 10000);
                        libFunctions.endGSMCall(client);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_008()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0)) {
                    lmr.GotoContactsList(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }
                        client.SetDevice(t1);
                        client.Run("adb shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc wifi enable");
                        client.Sleep(13000);
                        if (libFunctions.EndCall(client) == 1)
                        {
                            Console.WriteLine("End Call triggered successfully:::"+i);
                        }
                        else
                        {
                            client.Sleep(23000);
                            try
                            {
                                client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0);
                            }
                            catch (Exception mes)
                            {
                                client.Sleep(23000);
                            }
                        }
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }

                        client.SetDevice(t1);
                        client.Run("adb shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc wifi enable");
                        client.Sleep(13000);
                        if (libFunctions.EndCall(client) == 1)
                        {
                            Console.WriteLine("End Call triggered successfully::"+i);
                        }
                        else
                        {
                            client.Sleep(23000);
                            try
                            {
                                client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0);
                            }
                            catch(Exception mes)
                            {
                                client.Sleep(23000);
                            }

                        }
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }


        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_009()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Run("adb shell svc wifi disable");
                            client.Sleep(3000);
                            client.Run("adb shell svc data disable");
                            client.Sleep(3000);
                            client.Run("adb  shell svc data enable");
                            client.Sleep(3000);
                            client.Run("adb  shell svc wifi enable");
                            client.Sleep(3000);

                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Run("adb shell svc wifi disable");
                            client.Sleep(3000);
                            client.Run("adb shell svc data disable");
                            client.Sleep(3000);
                            client.Run("adb  shell svc data enable");
                            client.Sleep(3000);
                            client.Run("adb  shell svc wifi enable");
                            client.Sleep(23000);
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }

            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_010()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(5000);
                            for (int k = 0; k <= 5; k++)
                            {
                                try
                                {
                                    client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                                    client.Sleep(3000);
                                    client.TouchUp();
                                }
                                catch (Exception ce)
                                {
                                    Console.WriteLine("Exception Catched::" + ce.Message);
                                    k = 5;
                                }
                                //libFunctions.HoldCallFloorWithDuration(client, 9000);
                                client.Sleep(3000);
                            }
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        CallSecondContact(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            for (int k = 0; k <= 5; k++)
                            {
                                try
                                {
                                    client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                                    client.Sleep(3000);
                                    client.TouchUp();
                                }
                                catch (Exception ce)
                                {
                                    Console.WriteLine("Exception Catched::" + ce.Message);
                                    k = 5;
                                }
                                //libFunctions.HoldCallFloorWithDuration(client, 9000);
                                client.Sleep(3000);
                            }
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_011()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(5000);
                            for (int k = 0; k <= 1; k++)
                            {
                                try
                                {
                                    client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                                    client.Sleep(163000);
                                    client.TouchUp();
                                }
                                catch (Exception ce)
                                {
                                    Console.WriteLine("Exception Catched::" + ce.Message);
                                    k = 5;
                                }
                                //libFunctions.HoldCallFloorWithDuration(client, 9000);
                                client.Sleep(3000);
                            }
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        CallSecondContact(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            for (int k = 0; k <= 1; k++)
                            {
                                try
                                {
                                    client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                                    client.Sleep(163000);
                                    client.TouchUp();
                                }
                                catch (Exception ce)
                                {
                                    Console.WriteLine("Exception Catched::" + ce.Message);
                                    k = 5;
                                }
                                client.Sleep(3000);
                            }
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_012()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < HCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0)) {
                    lmr.GotoContactsList(client);
                    //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        libFunctions.CallFirstContact(client);
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(2000);
                            client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                            client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                            client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                            client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                        }
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        CallSecondContact(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(2000);
                            client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                            client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                            client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                            client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                        }

                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }
        # endregion 

        #region SFD Calls
        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_014()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();

            LMR lmr = new LMR();
            for (int i = 1; i <= SFDCalls; i++)
            {



                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);


                    if (i % 2 == 0)
                    {
                        com.SearhForContactInContactList(client, Target2_Name);
                        client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        sfdElement(client);

                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.SetDevice(t1);
                            client.Sleep(13000);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);

                            }

                        }
                        else
                        {
                            client.SetDevice(t1);
                            Helper.Instance().ClickOkIfOkExits(client);

                        }
                    }
                    else
                    {
                        com.SearhForContactInContactList(client, Target3_Name);
                        client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        sfdElement(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(13000);
                            client.SetDevice(t1);
                            client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                        }
                        else
                        {
                            client.SetDevice(t1);
                            Helper.Instance().ClickOkIfOkExits(client);
                            Helper.Instance().GoBackByClickingBackIcon(client);
                        }
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_015()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();
            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    if (i == 1)
                    {
                        if (fav.VerifyFavoriteInFavoriteList(client, Target2_Name) == 1)
                        {
                            Console.WriteLine("Contacts are added as favourites");
                            Helper.Instance().GoBackByClickingBackIcon(client);
                        }
                        else
                        {
                            fav.AddNewFavoriteContactFromFavorites(client, Target2_Name);
                        }

                        if (fav.VerifyFavoriteInFavoriteList(client, Target3_Name) == 1)
                        {
                            Console.WriteLine("Contacts are added as favourites");
                            Helper.Instance().GoBackByClickingBackIcon(client);

                        }
                        else
                        {
                            fav.AddNewFavoriteContactFromFavorites(client, Target3_Name);
                        }

                    }
                    fav.Goto_Favorites(client);
                    if (i % 2 == 0)
                    {
                        client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        sfdElement(client);

                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.SetDevice(t1);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                client.Sleep(15000);
                            }

                        }
                        else
                        {
                            client.SetDevice(t1);
                            Helper.Instance().ClickOkIfOkExits(client);

                        }
                    }
                    else
                    {
                        client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1);
                        client.Sleep(3000);
                        client.TouchUp();
                        sfdElement(client);
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(15000);
                            client.SetDevice(t1);
                            client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                            client.Sleep(3000);
                        }
                        else
                        {
                            client.SetDevice(t1);
                            Helper.Instance().ClickOkIfOkExits(client);

                        }
                    }
                }

                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }

            }

        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_016()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();


            for (int i = 1; i <= SFDCalls; i++)
            {

                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {

                    lmr.Goto_History(client);

                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0)) // ref
                        {
                            his.SearchHistory(client, Target2_Name);
                            Helper.Instance().Wait(5000);
                            client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0, 1);
                            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0, 1);
                            }
                            else
                            {
                                Console.WriteLine("SFD icon not found");
                            }

                            client.SetDevice(t2);
                            if (libFunctions.verifyHookAcceptButton(client))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                                client.Sleep(6000);
                            }
                            if (i % 2 == 0)
                            {
                                client.SetDevice(t1);
                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    Helper.Instance().GoBackByClickingBackIcon(client);
                                }

                            }
                            else
                            {
                                client.SetDevice(t2);
                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    Helper.Instance().GoBackByClickingBackIcon(client);
                                }
                                client.SetDevice(t1);
                            }

                            client.Sleep(3000);
                            Helper.Instance().ClickOkIfOkExits(client);
                            Helper.Instance().GoBackByClickingBackIcon(client);


                        }
                    }
                    else
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0)) // ref
                        {
                            his.SearchHistory(client, Target3_Name);
                            Helper.Instance().Wait(5000);
                            client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0, 1);
                            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0, 1);
                            }
                            else
                            {
                                Console.WriteLine("SFD icon not found");
                            }
                        }
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                            client.Sleep(6000);
                        }

                        if (i % 2 == 0)
                        {
                            client.SetDevice(t1);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }

                        }
                        else
                        {
                            client.SetDevice(t3);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }
                            client.SetDevice(t1);
                        }

                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                        Helper.Instance().GoBackByClickingBackIcon(client);

                    }

                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_017()
        {
            client.SetDevice(t1);

            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();


            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.Goto_History(client);


                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0)) // ref
                        {
                            Helper.Instance().Wait(5000);
                            client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0, 1);
                            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0, 1);
                            }
                            else
                            {
                                Console.WriteLine("SFD icon not found");
                            }

                            client.SetDevice(t2);
                            if (libFunctions.verifyHookAcceptButton(client))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                                client.Sleep(6000);
                            }
                            if (i % 2 == 0)
                            {
                                client.SetDevice(t1);
                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    Helper.Instance().GoBackByClickingBackIcon(client);
                                }

                            }
                            else
                            {
                                client.SetDevice(t2);
                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    Helper.Instance().GoBackByClickingBackIcon(client);
                                }
                                client.SetDevice(t1);
                            }

                            client.Sleep(3000);
                            Helper.Instance().ClickOkIfOkExits(client);
                            Helper.Instance().GoBackByClickingBackIcon(client);


                        }
                    }
                    else
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0)) // ref
                        {
                            Helper.Instance().Wait(5000);
                            client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 1, 1);
                            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0, 1);
                            }
                            else
                            {
                                Console.WriteLine("SFD icon not found");
                            }
                        }
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                            client.Sleep(6000);
                        }

                        if (i % 2 == 0)
                        {
                            client.SetDevice(t1);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }

                        }
                        else
                        {
                            client.SetDevice(t3);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }
                            client.SetDevice(t1);
                        }

                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                        Helper.Instance().GoBackByClickingBackIcon(client);

                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }

            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_018()
        {
            client.SetDevice(t1);

            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();


            for (int i = 1; i <= SFDCalls; i++)
            {

                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.Goto_History(client);


                    if (i == 1)
                    {
                        client.Sleep(6000);
                    }
                    if (i % 2 != 0)
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0)) // ref
                        {
                            Helper.Instance().Wait(5000);
                            client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0, 1);
                            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0, 1);
                            }
                            else
                            {
                                Console.WriteLine("SFD icon not found");
                            }

                            client.SetDevice(t2);
                            if (libFunctions.verifyHookAcceptButton(client))
                            {
                                client.Sleep(16000);
                            }
                            if (i % 2 == 0)
                            {
                                client.SetDevice(t1);
                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    if (Helper.Instance().ClickOkIfOkExits(client) == 1)
                                    {
                                        Console.WriteLine("Ok Presented");
                                        Helper.Instance().ClickOkIfOkExits(client);
                                    }
                                    else
                                    {
                                        Helper.Instance().GoBackByClickingBackIcon(client);
                                    }
                                }

                            }
                            else
                            {
                                client.SetDevice(t2);
                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    Helper.Instance().GoBackByClickingBackIcon(client);
                                }
                                client.SetDevice(t1);
                            }

                            client.Sleep(3000);
                            if (Helper.Instance().ClickOkIfOkExits(client) == 1)
                            {
                                Console.WriteLine("Ok Presented");
                            }
                            else
                            {
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }

                        }
                    }
                    else
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0)) // ref
                        {
                            Helper.Instance().Wait(5000);
                            client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 1, 1);
                            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.titlebarPhoneIcon' and @onScreen='true']", 0, 1);
                            }
                            else
                            {
                                Console.WriteLine("SFD icon not found");
                            }
                        }
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Sleep(16000);
                        }

                        if (i % 2 == 0)
                        {
                            client.SetDevice(t1);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }

                        }
                        else
                        {
                            client.SetDevice(t3);
                            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                            {
                                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                Helper.Instance().GoBackByClickingBackIcon(client);
                            }
                            client.SetDevice(t1);
                        }

                        client.Sleep(3000);
                        Helper.Instance().ClickOkIfOkExits(client);
                        Helper.Instance().GoBackByClickingBackIcon(client);

                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }

            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_019()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                    if (i == 1)
                    {
                        client.Sleep(10000);
                    }
                    if (i % 2 != 0)
                    {
                        try
                        {
                            com.SearhForContactInContactList(client, Target2_Name);
                            Console.WriteLine("What is my tar:" + Target2_Name);
                            client.Sleep(3000);
                            client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            sfdElement(client);
                        } catch (Exception ce)
                        {
                            Console.WriteLine("Exception while triggering sfd Call" + ce.Message);
                        }


                        client.SetDevice(t2);
                        client.Sleep(4000);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        }
                        client.SetDevice(t3);
                        try
                        {
                            lmr.GotoContactsList(client);

                        } catch (Exception es)
                        {
                            Console.WriteLine("Exception catched in Device 3" + es.Message);
                            Helper.Instance().ClosePopUP(client);
                            lmr.GotoContactsList(client);
                        }
                        com.SearhForContactInContactList(client, Target2_Name);
                        client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                        client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                        client.SetDevice(t2);
                        libFunctions.AcceptVideoCall(client);
                        client.ClickCoordinate(10, 800, 1);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        }
                        libFunctions.ExpandVideoCall(client);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);
                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }

                        if (i % 2 == 0)
                        {
                            client.SetDevice(t1);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                            Helper.Instance().GoBackByClickingBackIcon(client);
                        }
                        else
                        {
                            client.SetDevice(t2);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                            client.SetDevice(t1);
                            Helper.Instance().GoBackByClickingBackIcon(client);
                        }
                        Console.WriteLine("Iteration 1 is completed");
                    }
                    else
                    {
                        try
                        {
                            com.SearhForContactInContactList(client, Target3_Name);
                            client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            sfdElement(client);
                        }
                        catch (Exception me)
                        {
                            Console.WriteLine("Exception in Main else loop:" + me.Message);
                        }

                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        }

                        client.SetDevice(t2);
                        try
                        {
                            lmr.GotoContactsList(client);
                        } catch (Exception mw)
                        {
                            Console.WriteLine("exception not catched::" + mw.Message);
                            Helper.Instance().ClosePopUP(client);
                            if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                            {
                                lmr.GotoContactsList(client);
                            }
                            else
                            {
                                Helper.Instance().GoBackByClickingBackIcon(client);
                                lmr.GotoContactsList(client);

                            }

                        }
                        com.SearhForContactInContactList(client, Target3_Name);
                        client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                        client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                        client.SetDevice(t3);
                        client.Sleep(4000);
                        libFunctions.AcceptVideoCall(client);
                        client.ClickCoordinate(10, 800, 1);
                        libFunctions.ExpandVideoCall(client);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                        if (i % 2 == 0)
                        {
                            client.SetDevice(t1);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                            Helper.Instance().GoBackByClickingBackIcon(client);
                            client.SetDevice(t1);
                        }
                        else
                        {
                            client.SetDevice(t3);
                            endsfdCall(client);
                            client.SetDevice(t1);
                            Helper.Instance().ClickOkIfOkExits(client);
                            Helper.Instance().GoBackByClickingBackIcon(client);
                            client.SetDevice(t1);
                        }
                    }
                }

                else
                {   
                    try
                    {
                        client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                        Helper.Instance().ClickOkIfOkExits(client);
                        Helper.Instance().ClickOnDismiss(client);
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("sfd call  is not ended");
                    }
                    catch(Exception ce)
                    {
                        Helper.Instance().ClickOkIfOkExits(client);
                        Helper.Instance().ClickOnDismiss(client);
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("Active screen is not home screen");
                    }
                }

            }

        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_020()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0)) {
                    lmr.GotoContactsList(client);
                    if (i == 1)
                    {
                        client.Sleep(10000);
                    }
                    if (i % 2 != 0)
                    {
                        try
                        {
                            client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            sfdElement(client);
                        }
                        catch (Exception mes)
                        {
                            Console.WriteLine("Exception while originating SFD Call" + mes.Message);
                        }
                        client.SetDevice(t2);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        }
                        client.SetDevice(t3);
                        client.Sleep(5000);

                        libFunctions.OriginateGSMCall(client, gsmCall);
                        client.SetDevice(t1);
                        libFunctions.waitForIncomingGSMCall(client, 20000);
                        libFunctions.answerGSMCall(client, 10000);
                        libFunctions.endGSMCall(client);
                        if (i % 2 != 0)
                        {
                            client.SetDevice(t1);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                        }
                        else
                        {
                            client.SetDevice(t2);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                            client.SetDevice(t1);
                        }

                    }
                    else
                    {
                        try
                        {
                            client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1);
                            client.Sleep(3000);
                            client.TouchUp();
                            sfdElement(client);
                        } catch (Exception me)
                        {
                            Console.WriteLine("exception while triggering call:" + me.Message);
                        }
                        client.SetDevice(t3);
                        if (libFunctions.verifyHookAcceptButton(client))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        }
                        client.SetDevice(t3);
                        client.Sleep(5000);

                        libFunctions.OriginateGSMCall(client, gsmCall);
                        client.SetDevice(t1);
                        libFunctions.waitForIncomingGSMCall(client, 20000);
                        libFunctions.answerGSMCall(client, 10000);
                        libFunctions.endGSMCall(client);
                        if (i % 2 != 0)
                        {
                            client.SetDevice(t1);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                        }
                        else
                        {
                            client.SetDevice(t3);
                            endsfdCall(client);
                            Helper.Instance().ClickOkIfOkExits(client);
                            client.SetDevice(t1);
                        }
                    }
            }
            else
                {
                Helper.Instance().ClickOkIfOkExits(client);
                Helper.Instance().ClickOnDismiss(client);
                Helper.Instance().GoBackByClickingBackIcon(client);
                Console.WriteLine("Active screen is not home screen");
            }
        }
    }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_021()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);

                
                    if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                        try
                        {
                            com.SearhForContactInContactList(client, Target2_Name);
                            client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            sfdElement(client);
                        }
                        catch (Exception me)
                        {
                            Console.WriteLine("me.messages" + me.Message);
                        }
                        client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(5000);
                    }
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(23000);

                    client.SetDevice(t1);
                    endsfdCall(client);
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);

                    }
                    else
                {
                    try {
                            com.SearhForContactInContactList(client, Target3_Name);

                            client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    }catch(Exception me)
                    {
                        Console.WriteLine("me.messages" + me.Message);
                    }

                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(5000);
                    }

                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(23000);
                    client.SetDevice(t1);
                    endsfdCall(client);
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_022()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    com.SearhForContactInContactList(client, Target2_Name);
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Sleep(5000);
                    }
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(30000);
                    client.SetDevice(t1);
                    endsfdCall(client);
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);

                    }

                    else
                {
                    com.SearhForContactInContactList(client, Target3_Name);
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Sleep(5000);
                    }

                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(30000);
                    client.SetDevice(t1);
                    endsfdCall(client);
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);

                    }
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_024()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            for (int i = 1; i <= SFDCalls; i++)
            {

                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    com.SearhForContactInContactList(client, Target2_Name);
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(175000);
                    }

                    if (i % 2 == 0)
                    {
                        client.SetDevice(t1);
                        endsfdCall(client);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        client.SetDevice(t2);
                        endsfdCall(client);
                        Helper.Instance().ClickOkIfOkExits(client);
                        client.SetDevice(t1);
                    }
                }
                else
                {
                    com.SearhForContactInContactList(client, Target3_Name);
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client); client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(175000);
                    }
                    if (i % 2 == 0)
                    {
                        client.SetDevice(t1);
                        endsfdCall(client);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        client.SetDevice(t3);
                        endsfdCall(client);
                        Helper.Instance().ClickOkIfOkExits(client);
                        client.SetDevice(t1);
                    }
                }
            }
                else
                {
                Helper.Instance().ClickOkIfOkExits(client);
                Helper.Instance().ClickOnDismiss(client);
                Helper.Instance().GoBackByClickingBackIcon(client);
                Console.WriteLine("Active screen is not home screen");
            }

        }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_025()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i <= SFDCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.GotoContactsList(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    com.SearhForContactInContactList(client, Target2_Name);
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(2000);
                        client.SetDevice(t3);
                            try
                            {
                                lmr.GotoContactsList(client);
                            }
                            catch (Exception mes)
                            {
                                Console.WriteLine("Exception occured");
                                Helper.Instance().ClosePopUP(client);
                                Helper.Instance().ClickOkIfOkExits(client);
                            }
                        client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                        client.Sleep(2000);
                        client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                        client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                        client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                        client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t1);
                    endsfdCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    com.SearhForContactInContactList(client, Target3_Name);
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(2000);
                        client.SetDevice(t2);
                            try
                            {
                                lmr.GotoContactsList(client);
                            }catch(Exception mes)
                            {
                                Console.WriteLine("Exception occured");
                                Helper.Instance().ClosePopUP(client);
                                Helper.Instance().ClickOkIfOkExits(client);
                            }
                        com.SearhForContactInContactList(client, Target3_Name);
                        client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                        client.Sleep(2000);
                        client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                        client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                        client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                        client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                        Helper.Instance().GoBackByClickingBackIcon(client);

                    }
                    client.SetDevice(t1);
                    endsfdCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }

        #endregion

        #region Adhoc GroupCalls
        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_026()
        {
            client.SetDevice(t1);
            libFunctions = new Call();
            LMR lmr = new LMR();
            client.Sleep(9000);

            for (int i = 1; i < ACalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    libFunctions.QuickGroupCallFromContactList(client, Target2_Name, Target3_Name, 5000);
                    client.Sleep(3000);
                    client.SetDevice(t2);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                    {
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t3);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                    {
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                Helper.Instance().ClickOkIfOkExits(client);
                Console.WriteLine("Active screen is not home screen");
            }
        }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_027()
        {

            client.SetDevice(t1);

            libFunctions = new Call();
            LMR lmr = new LMR();
            client.Sleep(9000);

            for (int i = 1; i < ACalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                libFunctions.QuickGroupCallFromFavorites(client, Target2_Name, Target3_Name, 5000);
                    client.Sleep(3000);
                    client.SetDevice(t2);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                    {
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t3);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                    {
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
									 
																	 
									 
																	 
									 
											 
                Helper.Instance().ClickOkIfOkExits(client);
                Console.WriteLine("Active screen is not home screen");
            }
        }
        }
        
        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_028()
        {
            client.SetDevice(t1);
            client.Sleep(9000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < ACalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                lmr.Goto_History(client);
                libFunctions.CallFromHistoryDetail(client);
                client.Sleep(3000);
                client.SetDevice(t2);
                try
                {
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                }
                catch (Exception ce)
                {
                    Console.WriteLine("Exception Catched");
                }
                client.SetDevice(t3);
                try
                {
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                }
                catch (Exception ce)
                {
                    Console.WriteLine("Exception Catched");
                }
                client.SetDevice(t1);
                libFunctions.EndCall(client);
                Helper.Instance().ClickOkIfOkExits(client);
            }
                else
                {
                Helper.Instance().ClickOkIfOkExits(client);
                Console.WriteLine("Active screen is not home screen");
            }
        }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_029()
        {
            client.SetDevice(t1);
            libFunctions = new Call();
            LMR lmr = new LMR();
            client.Sleep(9000);

            for (int i = 1; i < ACalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    libFunctions.QuickGroupCallFromContactList(client, Target2_Name, Target3_Name, 5000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Console.WriteLine("Active screen is not home screen");
                }
            }
        }
                

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_030()
        {
            client.SetDevice(t1);
            libFunctions = new Call();
            LMR lmr = new LMR();
            client.Sleep(19000);

            for (int i = 1; i < ACalls; i++)
            {

                try
                {
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                    {
                        libFunctions.QuickVideoGroupCallFromContactList(client, Target2_Name, Target3_Name);
                        client.Sleep(3000);
                        libFunctions.ShrinkVideoCall(client);
                        libFunctions.TapCallReadyScreen(client);
                        client.SetDevice(t2);
                        if (libFunctions.AcceptVideoCall(client)==1)
                        {
                            libFunctions.ShrinkVideoCall(client);
                        }
                        else
                        {
                            clearAlerts(client);
                        }
                        
                        client.SetDevice(t3);
                        if (libFunctions.AcceptVideoCall(client) == 1)
                        {
                            libFunctions.ShrinkVideoCall(client);
                        }
                        else
                        {
                            clearAlerts(client);
                        }
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                        {
                            libFunctions.HoldCallFloorWithDuration(client, 9000);
                        }
                        libFunctions.ExpandVideoCall(client);
                        libFunctions.EndVideoCall(client);
                        client.SetDevice(t1);
                        libFunctions.EndCall(client);
                        libFunctions.ExpandVideoCall(client);
                        libFunctions.EndVideoCall(client);
                        Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        Helper.Instance().ClickOkIfOkExits(client);
                        Console.WriteLine("Active screen is not home screen");
                    }
                }
                catch (Exception ce)
                {
                    Console.WriteLine("Exception Cathched");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_031()
        {
            client.SetDevice(t1);
            libFunctions = new Call();
            LMR lmr = new LMR();
            client.Sleep(19000);

            for (int i = 1; i < ACalls; i++)
            {

                try
                {
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                    {
                    libFunctions.QuickGroupCallFromContactList(client, Target2_Name, Target3_Name, 9000);
                    client.Sleep(5000);
                    client.SetDevice(t3);
                    libFunctions.OriginateGSMCall(client, gsmCall);
                    libFunctions.waitForIncomingGSMCall(client, 9000);
                    client.SetDevice(t1);
                    libFunctions.answerGSMCall(client, 10000);
                    libFunctions.endGSMCall(client);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                    }
                    else
                    {
                        Helper.Instance().ClickOkIfOkExits(client);
                        Console.WriteLine("Active screen is not home screen");
                    }

                }
                catch (Exception ce)
                {
                    Console.WriteLine("Exception Cathched");
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_032()
        {
            client.SetDevice(t1);


            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);

                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("Exception catched:" + ce.Message);
                    }
                    client.SetDevice(t2);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(3000);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("Exception catched:" + ce.Message);
                    }
                    client.SetDevice(t3);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(3000);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_033()
        {
            client.SetDevice(t1);


            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception Catched");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }

                    client.SetDevice(t2);
                    client.Sleep(4000);



                    try
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                            client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                            client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                            client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                        }
                        else
                        {
                            clearAlerts(client);
                            if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                                client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                                client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                                client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                            
                            }
                            else
                            {
                                Helper.Instance().GoBackByClickingBackIcon(client);

                            }
                        }
                    }
                    catch (Exception ces)
                    {
                        Console.WriteLine("There is the error message");
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    his.SearchAndCallHistory(client, Target2_Name);
                    client.SetDevice(t3);
                    client.Sleep(4000);
                    try
                    {
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                            client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                            client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                            client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                        }
                        else
                        {
                            clearAlerts(client);
                            if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                                client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                                client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                                client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);

                            }
                            else
                            {
                                Helper.Instance().GoBackByClickingBackIcon(client);

                            }
                        }
                    }
                    catch (Exception ces)
                    {
                        Console.WriteLine("There is the error message");
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }

            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_034()
        {
            client.SetDevice(t1);



            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    for (int k = 0; k <= 5; k++)
                    {
                        try
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception Catched");
                            Helper.Instance().ClickOkIfOkExits(client);
                            lmr.Goto_History(client);
                            libFunctions.CallFromHistoryDetail(client);
                        }
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    for (int k = 0; k <= 5; k++)
                    {
                        try
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception Catched");
                            Helper.Instance().ClickOkIfOkExits(client);
                            lmr.Goto_History(client);
                            libFunctions.CallFromHistoryDetail(client);
                        }


                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_035()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < ACalls; i++)
            {

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.QuickGroupCallFromContactList(client, Target2_Name, Target3_Name, 1000);

                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                    }
                    for (int k = 0; k <= 5; k++)
                    {
                        try
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(173000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception Catched");
                            Helper.Instance().ClickOkIfOkExits(client);
                        }
                    }

                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        libFunctions.QuickGroupCallFromContactList(client, Target2_Name, Target3_Name, 1000);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                    }
                    for (int k = 0; k <= 5; k++)
                    {
                        try
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(173000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception Catched");
                        }
                    }
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_036()
        {
            client.SetDevice(t1);

            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < ACalls; i++)
            {

                try
                {
                    libFunctions.QuickGroupCallFromContactList(client, Target2_Name, Target3_Name, 1000);
                    lmr.GotoContactsList(client);
                    client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                    client.SetDevice(t2);
                    client.Sleep(5000);
                    lmr.GotoContactsList(client);
                    client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                catch (Exception ce)
                {
                    Console.WriteLine("exception catached");
                }

            }
        }

        #endregion

        #region GroupCalls

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_037()
        {
            client.SetDevice(t1);
            client.Sleep(15000);

            libFunctions = new Call();
            LMR lmr = new LMR();

            

            for (int i = 1; i < GCalls; i++)
            {
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Contacts"), 0))
                {
                    lmr.EnableScanMode(client);
                GroupName = lmr.GetGroupNameOnScreen(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }

                Console.WriteLine("Called to the::setup1target2::CallFirstContact::i Value is " + i);
                    lmr.OriginateLMRCall(client, GroupName);
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
                client.SetDevice(t2);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                {
                    lmr.EnableScanMode(client);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
                client.SetDevice(t3);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("NoOneSpeakingText"), 0))
                {
                    lmr.EnableScanMode(client);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                }
                else
                {
                    Helper.Instance().ClickOkIfOkExits(client);
                    Helper.Instance().ClickOnDismiss(client);
                    Console.WriteLine("Active screen is not home screen");
                }
                client.SetDevice(t1);
                libFunctions.EndCall(client);
                client.Sleep(3000);
                Helper.Instance().ClickOkIfOkExits(client);

                string channelLeft = "xpath =//*[@css='DIV.x-component.x-button.x-button-no-icon.x-heighted.x-stretched.arrow-left.x-layout-box-item.x-layout-hbox-item' and @onScreen='true']";
                string channelRight = "xpath=//*[@css='DIV.x-component.x-button.x-button-no-icon.x-heighted.arrow-right.x-layout-box-item.x-layout-hbox-item.x-stretched' and @onScreen='true']";
                string selectedChannel = lmr.GetCurrentSelectedChannel(client);
                var sc = Int16.Parse(selectedChannel);
                
                if(client.IsElementFound("WEB", channelRight, 0))
                {
                    client.Click("WEB", channelRight, 0, 1);
                }
                else if (client.IsElementFound("WEB", channelLeft, 0))
                {
                    client.Click("WEB", channelLeft, 0, 1);
                }
                else
                {
                    lmr.SelectFirstChannelInChannelList(client);
                }

            }
        }
        [TestMethod]
        public void channelChange()
        {
            
            string channelLeft = "xpath =//*[@css='DIV.x-component.x-button.x-button-no-icon.x-heighted.x-stretched.arrow-left.x-layout-box-item.x-layout-hbox-item' and @onScreen='true']";
            string channelRight = "xpath=//*[@css='DIV.x-component.x-button.x-button-no-icon.x-heighted.arrow-right.x-layout-box-item.x-layout-hbox-item.x-stretched' and @onScreen='true']";
            string selectedChannel = lmr.GetCurrentSelectedChannel(client);
            var sc = Int16.Parse(selectedChannel);

            for(int i = 1; i < 10; i++) { 
            if (client.IsElementFound("WEB", channelRight, 0))
            {
                client.Click("WEB", channelRight, 0, 1);
                Console.WriteLine("Channel right found");
                    client.Sleep(4000);
            }
            else if (client.IsElementFound("WEB", channelLeft, 0))
            {
                client.Click("WEB", channelLeft, 0, 1);
                Console.WriteLine("Channel left found");
                client.Sleep(4000);
                }
            else
            {
                lmr.SelectFirstChannelInChannelList(client);
                Console.WriteLine("default Channel selected");
                client.Sleep(4000);

                }
            }

        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_038()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();



            for (int i = 1; i < GCalls; i++)
            {
                fav.Goto_Favorites(client);
                string favGroups = "xpath=//*[@text='Favorite groups' and @css='SPAN.x-button-label' and @hidden='false' and @onScreen='true' or @text='Favourite groups' and @css='SPAN.x-button-label' and @hidden='false' and @onScreen='true']";
                client.Click("WEB", favGroups, 0, 1);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 100)
                {
                    try
                    {
                        GroupManager.Instance().TapAdd(client);
                        client.Click("WEB", GlobalHelper.GetObject("Checkbox"), 0, 1);
                        client.Sleep(500);
                        client.Click("WEB", GlobalHelper.GetObject("Checkbox"), 1, 1);
                        ContactManager.Instance().TapSave(client);
                    }
                    catch (Exception ce)
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("Exception catched");
                    }
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFirstContact(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception Catched");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    Console.WriteLine("Called to the::setup1target2::CallFirstgroup::i Value is " + i);
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);

                }
                else
                {
                    try
                    {
                        CallSecondContact(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception Catched");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    Console.WriteLine("Called to the::setup1target2::CallFirstgroup::i Value is " + i);
                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_039()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception Catched");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    Console.WriteLine("Called to the::setup1target2::CallFirstgroup::i Value is " + i);
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);


                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception Catched");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_040()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < HCalls; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.Sleep(16000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);

                    }
                    client.SetDevice(t1);
                    client.Sleep(16000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        //Video and Audio interactions
        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_041()
        {
            client.SetDevice(t1);

            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {

                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.Sleep(4000);
                    client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                    client.Sleep(3000);
                    client.SetDevice(t2);
                    client.Sleep(3000);
                    client.Click("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0, 1);
                    client.Sleep(3000);
                    client.ClickCoordinate(10, 800, 1);
                    libFunctions.ExpandVideoCall(client);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }

                    client.SetDevice(t1);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);
                    }
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                    client.SetDevice(t3);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0))
                    {
                        Console.WriteLine("MCVideoCallAcccept is Found");
                        client.Click("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0, 1);
                    }
                    client.Sleep(3000);
                    client.ClickCoordinate(10, 800, 1);
                    libFunctions.ExpandVideoCall(client);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {


                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }

                    client.SetDevice(t1);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);
                    }
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);

                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_042()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {

                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    client.SetDevice(t3);
                    client.Sleep(5000);
                    libFunctions.OriginateGSMCall(client, gsmCall);
                    client.SetDevice(t1);
                    libFunctions.waitForIncomingGSMCall(client, 20000);
                    libFunctions.answerGSMCall(client, 10000);
                    libFunctions.endGSMCall(client);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);


                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    libFunctions.OriginateGSMCall(client, gsmCall);
                    client.SetDevice(t1);
                    libFunctions.waitForIncomingGSMCall(client, 20000);
                    libFunctions.answerGSMCall(client, 10000);
                    libFunctions.endGSMCall(client);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);



                }
            }
        }

        //[TestMethod]
        public void HS_PoC_Stability_PTTCalls_043()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);

                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("Exception catched:" + ce.Message);
                    }
                    client.SetDevice(t2);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(3000);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                        Console.WriteLine("Exception catched:" + ce.Message);
                    }
                    client.SetDevice(t3);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(3000);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_044()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception Catched");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }

                    client.SetDevice(t2);
                    clearAlerts(client);
                    lmr.EnableScanMode(client);
                    client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                    client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                    client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                    client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }


                else
                {
                    secondCallFromHistoryDetail(client);
                    client.SetDevice(t3);
                    clearAlerts(client);
                    lmr.EnableScanMode(client);
                    client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                    client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                    client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                    client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }

            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_045()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t2);
                    client.Sleep(5000);
                    for (int k = 0; k <= 5; k++)
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        //libFunctions.HoldCallFloorWithDuration(client, 9000);
                        client.Sleep(3000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t3);
                    for (int k = 0; k <= 5; k++)
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        client.Sleep(3000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_046()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                lmr.Goto_History(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    try
                    {
                        libFunctions.CallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t2);
                    client.Sleep(5000);
                    for (int k = 0; k <= 5; k++)
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                        client.Sleep(175000);
                        client.TouchUp();
                        //libFunctions.HoldCallFloorWithDuration(client, 9000);
                        client.Sleep(3000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    try
                    {
                        secondCallFromHistoryDetail(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("exception catached");
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                    client.SetDevice(t3);
                    for (int k = 0; k <= 5; k++)
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                        client.Sleep(175000);
                        client.TouchUp();
                        client.Sleep(3000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_047()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                GroupName = lmr.GetGroupNameOnScreen(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                try
                {
                    lmr.OriginateLMRCall(client, GroupName);
                }
                catch (Exception ce)
                {
                    Console.WriteLine("exception catached");
                    //Helper.Instance().GoBackByClickingBackIcon(client);
                }
                lmr.GotoContactsList(client);
                client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                client.SetDevice(t2);
                client.Sleep(5000);
                lmr.GotoContactsList(client);
                client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0, 1);
                client.SetDevice(t1);
                libFunctions.EndCall(client);
                client.Sleep(3000);
                Helper.Instance().ClickOkIfOkExits(client);
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_048()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                if (i % 2 != 0)
                {
                    GroupName = lmr.GetGroupNameOnScreen(client);
                    lmr.OriginateLMRCall(client, GroupName);
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.EnableScanMode(client);
                    client.Sleep(5000);

                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.DisableScanMode(client);
                    client.Sleep(5000);

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    GroupName = lmr.GetGroupNameOnScreen(client);
                    lmr.OriginateLMRCall(client, GroupName);
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.DisableScanMode(client);
                    client.Sleep(5000);
                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.EnableScanMode(client);
                    client.Sleep(5000);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_049()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < GCalls; i++)
            {
                if (i % 2 != 0)
                {
                    GroupName = lmr.GetGroupNameOnScreen(client);
                    lmr.OriginateLMRCall(client, GroupName);
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.EnableScanMode(client);
                    client.Sleep(5000);

                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.DisableScanMode(client);
                    client.Sleep(5000);

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    GroupName = lmr.GetGroupNameOnScreen(client);
                    lmr.OriginateLMRCall(client, GroupName);
                    client.SetDevice(t2);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.DisableScanMode(client);
                    client.Sleep(5000);
                    client.SetDevice(t3);
                    libFunctions.HoldCallFloorWithDuration(client, 9000);
                    lmr.EnableScanMode(client);
                    client.Sleep(5000);
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_PTTCalls_050()
        {
            client.SetDevice(t1);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            client.SetDevice(t1);
            for (int zone = 1; zone <= 7; zone++)
            {
                lmr.ZoneSelectionfromZoneChannelListIcon(client, "Zone", "" + zone);

            }
            client.SetDevice(t2);
            for (int zone = 1; zone <= 7; zone++)
            {
                lmr.ZoneSelectionfromZoneChannelListIcon(client, "Zone", "" + zone);

            }
            client.SetDevice(t3);
            for (int zone = 1; zone <= 7; zone++)
            {
                lmr.ZoneSelectionfromZoneChannelListIcon(client, "Zone", "" + zone);

            }
        }

        #endregion

        #region MCVideo
        [TestMethod]
        public void HS_PoC_Stability_MCVideoCalls_001()
        {
            client.SetDevice(t1);
            client.Sleep(60000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            
            for (int i = 1; i < MCVideoCalls; i++)
            {
                lmr.GotoContactsList(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    Console.WriteLine("Called to the::setup1target2::CallFirstContact::i Value is " + i);
                    libFunctions.OriginateVideoCall(client,Target2_Number);
                    client.SetDevice(t2);
                    if (libFunctions.AcceptVideoCall(client) == 1)
                    {
                        libFunctions.ShrinkVideoCall(client);
                        libFunctions.ExpandVideoCall(client);
                        client.SetDevice(t1);
                        stopStreaming(client);
                        client.SetDevice(t2);
                        startStreaming(client);
                        client.Sleep(5000);
                        switchCamera(client);
                        libFunctions.EndVideoCall(client);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        libFunctions.EndVideoCall(client);
                    }
                }
                else
                {
                    client.SetDevice(t1);
                    set.LaunchSettings(client);
                    set.TapSettings(client);
                    libFunctions.OriginateVideoCall(client, Target3_Number);
                    client.SetDevice(t3);
                    try
                    {
                        libFunctions.RejectVideoCall(client);
                    }catch(Exception ce)
                    {
                        Console.WriteLine("Reject Button Not Found");
                        Console.WriteLine(ce.Message);
                        client.SetDevice(t1);
                        libFunctions.OriginateVideoCall(client, Target3_Number);
                        client.SetDevice(t2);
                        libFunctions.RejectVideoCall(client);
                        client.Sleep(3000);
                    }
                    client.SetDevice(t1);
                }
            }
        }

        [TestMethod]
        public void HS_PoC_Stability_MCVideoCalls_002()
        {
            client.SetDevice(t1);
            client.Sleep(60000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < MCVideoCalls; i++)
            {
                fav.Goto_Favorites(client);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    Console.WriteLine("Called to the::setup1target2::CallFirstContact::i Value is " + i);
                    
                    client.SetDevice(t2);
                    if (libFunctions.AcceptVideoCall(client) == 1)
                    {
                        libFunctions.ShrinkVideoCall(client);
                        libFunctions.ExpandVideoCall(client);
                        client.SetDevice(t1);
                        stopStreaming(client);
                        client.SetDevice(t2);
                        startStreaming(client);
                        client.Sleep(5000);
                        switchCamera(client);
                        libFunctions.EndVideoCall(client);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        libFunctions.EndVideoCall(client);
                    }
                }
                else
                {
                    client.SetDevice(t1);
                    Console.WriteLine("Called to the::setup1target2::CallFirstContact::i Value is " + i);
                    libFunctions.OriginateVideoCall(client, Target3_Number);
                    client.SetDevice(t3);
                    try
                    {
                        libFunctions.RejectVideoCall(client);
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Reject Button Not Found");
                        Console.WriteLine(ce.Message);
                        client.SetDevice(t1);
                        libFunctions.OriginateVideoCall(client, Target3_Number);
                        client.SetDevice(t2);
                        libFunctions.RejectVideoCall(client);
                        client.Sleep(3000);
                    }
                    client.SetDevice(t1);
                }
            }
        }


        #endregion



        public void HS_PoC_Stability_PTTCalls_0026()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0021()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < 100; i++)
            {
                fav.Goto_FavoritesContact(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0033()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < 100; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFromHistoryDetail(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    secondCallFromHistoryDetail(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0044()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < 100; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFromHistoryDetail(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    secondCallFromHistoryDetail(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);

                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0055()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < 100; i++)
            {
                lmr.Goto_History(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFromHistoryDetail(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        //client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                        client.Sleep(10000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    secondCallFromHistoryDetail(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        //client.Click("WEB", GlobalHelper.GetObject("HookReject"), 0, 1);
                        client.Sleep(10000);

                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }


        public void HS_PoC_Stability_PTTCalls_0066()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();
            Favorite fav = new Favorite();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);

                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                    client.SetDevice(t2);
                    libFunctions.AcceptVideoCall(client);
                    client.ClickCoordinate(10, 800, 1);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                    }
                    libFunctions.ExpandVideoCall(client);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                    client.SetDevice(t3);
                    libFunctions.AcceptVideoCall(client);
                    client.ClickCoordinate(10, 800, 1);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        //client.Sleep(10000);
                    }
                    libFunctions.ExpandVideoCall(client);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);

                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0077()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t3);
                    client.Sleep(5000);

                    libFunctions.OriginateGSMCall(client, "7019128871");
                    client.SetDevice(t1);
                    libFunctions.waitForIncomingGSMCall(client, 20000);
                    libFunctions.answerGSMCall(client, 10000);
                    libFunctions.endGSMCall(client);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0088()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(3000);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc data disable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc data enable");
                    client.Sleep(3000);
                    client.Run("adb  shell svc wifi enable");
                    client.Sleep(3000);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }


        public void HS_PoC_Stability_PTTCalls_0099()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        //client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Run("adb shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc wifi enable");
                        client.Sleep(3000);

                        //libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Run("adb shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc wifi enable");
                        client.Sleep(3000);

                        //client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        //libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0100()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(5000);
                        for (int k = 0; k <= 50; k++)
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            //libFunctions.HoldCallFloorWithDuration(client, 9000);
                            client.Sleep(3000);
                        }
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        for (int k = 0; k <= 50; k++)
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(3000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0111()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(5000);
                        for (int k = 0; k <= 30; k++)
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(163000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        for (int k = 0; k <= 30; k++)
                        {
                            client.TouchDown("WEB", GlobalHelper.GetObject("CallIconNoOneSpeaking"), 0);
                            client.Sleep(163000);
                            client.TouchUp();
                            client.Sleep(3000);
                        }
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        public void HS_PoC_Stability_PTTCalls_0122()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i == 1)
                {
                    client.Sleep(6000);
                }
                if (i % 2 != 0)
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(2000);
                        client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                        client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                        client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                        client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(2000);
                        client.Click("WEB", GlobalHelper.GetObject("Message"), 0, 1);
                        client.Click("WEB", GlobalHelper.GetObject("MessageText"), 0, 1);
                        client.ElementSendText("WEB", GlobalHelper.GetObject("MessageText"), 0, "Stability::" + i);
                        client.Click("WEB", GlobalHelper.GetObject("BravoSend"), 0, 1);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }





        //[TestMethod]
        public void MCVideoTC1()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            for (int i = 1; i <= 100; i++)
            {
                if (i % 2 == 0)
                {
                    client.SetDevice(t1);
                    if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                    {
                        client.Sleep(5000);

                        client.SetDevice(t2);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t3);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);


                        client.SetDevice(t1);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                    }
                    else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                        Console.WriteLine("Video Call Origination Failed" + i);
                    }
                }
                else if (i % 3 == 0)
                {
                    client.SetDevice(t3);
                    if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                    {
                        client.Sleep(5000);

                        client.SetDevice(t1);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t3);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);


                        client.SetDevice(t2);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                    }
                    else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                        Console.WriteLine("Video Call Origination Failed" + i);
                    }
                }
                else
                {
                    client.SetDevice(t2);
                    if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                    {
                        client.Sleep(5000);

                        client.SetDevice(t2);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t1);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);


                        client.SetDevice(t3);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                    }
                    else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                        Console.WriteLine("Video Call Origination Failed" + i);
                    }
                }
            }

        }

        //[TestMethod]
        public void MCVideoTC2()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            for (int i = 1; i <= 10; i++)
            {
                if (i % 2 == 0)
                {
                    client.SetDevice(t1);
                    if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                    {
                        client.Sleep(5000);

                        client.SetDevice(t2);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t3);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        //Device one stops the streaming
                        client.SetDevice(t1);
                        stopStreaming(client);

                        //Device 3 start the streaming
                        client.SetDevice(t3);
                        startStreaming(client);
                        client.Sleep(2000);
                        switchCamera(client);

                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                    }
                    else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                        Console.WriteLine("Video Call Origination Failed" + i);
                    }
                }
                else if (i % 3 == 0)
                {
                    client.SetDevice(t3);
                    if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                    {
                        client.Sleep(5000);

                        client.SetDevice(t1);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t3);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);


                        client.SetDevice(t3);
                        stopStreaming(client);

                        client.SetDevice(t1);
                        startStreaming(client);


                        client.SetDevice(t2);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                    }
                    else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                        Console.WriteLine("Video Call Origination Failed" + i);
                    }
                }
                else
                {
                    client.SetDevice(t2);
                    if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                    {
                        client.Sleep(5000);

                        client.SetDevice(t3);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t1);
                        libFunctions.AcceptVideoCall(client);
                        client.Sleep(3000);

                        client.SetDevice(t2);
                        stopStreaming(client);
                        client.Sleep(3000);

                        client.SetDevice(t3);
                        startStreaming(client);
                        client.Sleep(3000);


                        client.SetDevice(t3);
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                            Console.WriteLine("Video Call::::" + i);

                        }
                        else
                        {
                            Console.WriteLine("Unable to end video Call::::" + i);
                            //adboutput = client.GetDeviceLog();
                            //client.GenerateReport();
                            //client.GetDevicesInformation();

                            client.Run("adb logcat-v time>adbfile.txt");
                            //Assert.Fail();
                        }
                    }
                    else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                        Console.WriteLine("Video Call Origination Failed" + i);
                    }
                }
            }

        }

        //[TestMethod]
        public void MCVideoTC3()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            for (int i = 1; i <= 10; i++)
            {
                // if (i % 2 == 0)
                // {
                client.SetDevice(t1);
                if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                {
                    client.Sleep(5000);

                    client.SetDevice(t2);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(1000);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(5000);
                    client.Run("adb shell svc wifi enable");

                    client.SetDevice(t3);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(3000);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(5000);
                    client.Run("adb shell svc wifi enable");

                    client.SetDevice(t1);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {

                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);
                        client.Sleep(20000);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }
                }
                else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                    Console.WriteLine("Video Call Origination Failed" + i);
                }
                //}

            }

        }

        //[TestMethod]
        public void MCVideoTC4()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            for (int i = 1; i <= 10; i++)
            {
                // if (i % 2 == 0)
                // {
                client.SetDevice(t1);
                if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                {
                    client.Sleep(5000);
                    client.SendText("{Home}");

                    client.SetDevice(t2);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(1000);
                    client.SendText("{Home}");

                    client.SetDevice(t3);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(3000);
                    client.SendText("{Home}");


                    client.SetDevice(t1);
                    client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);
                    client.Sleep(3000);
                    stopStreaming(client);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {

                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);
                        client.SetDevice(t2);
                        client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);

                        client.SetDevice(t3);
                        client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, false);

                        client.Sleep(20000);


                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }
                }
                else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                    Console.WriteLine("Video Call Origination Failed" + i);
                }
                //}

            }

        }

        //[TestMethod]
        public void MCVideoTC5()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            for (int i = 1; i <= 100; i++)
            {
                client.SetDevice(t1);

                if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                {
                    client.Sleep(5000);

                    libFunctions.ShrinkVideoCall(client);
                    client.SetDevice(t2);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(3000);
                    libFunctions.ShrinkVideoCall(client);

                    client.SetDevice(t3);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(3000);
                    libFunctions.ShrinkVideoCall(client);

                    client.SetDevice(t1);
                    libFunctions.ExpandVideoCall(client);

                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }
                }
                else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                    Console.WriteLine("Video Call Origination Failed" + i);
                }
            }
        }

        //[TestMethod]
        public void MCVideoTC6()
        {


            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();


            for (int i = 1; i <= 100; i++)
            {
                client.SetDevice(t1);

                if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                {
                    client.Sleep(5000);

                    client.SetDevice(t2);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(3000);
                    libFunctions.ShrinkVideoCall(client);
                    client.Sleep(3000);
                    libFunctions.GroupCall(client, "TIR_Crashes");

                    client.SetDevice(t3);
                    libFunctions.AcceptVideoCall(client);
                    client.Sleep(3000);
                    libFunctions.HoldCallFloorWithDuration(client, 3);

                    client.SetDevice(t1);
                    libFunctions.ExpandVideoCall(client);

                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        //client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }
                }
                else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                    Console.WriteLine("Video Call Origination Failed" + i);
                }
            }
        }

        //[TestMethod]
        public void MCVideoTC7()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();


            for (int i = 1; i <= 100; i++)
            {
                client.SetDevice(t1);

                if (libFunctions.MCVideoGroupCall(client, "TIR_Crashes") == 1)
                {
                    client.Sleep(5000);

                    client.SetDevice(t2);
                    if (libFunctions.AcceptVideoCall(client) == 1)
                    {

                        client.Sleep(3000);
                        libFunctions.ShrinkVideoCall(client);
                    }


                    client.Sleep(3000);
                    libFunctions.GroupCall(client, "TIR_Crashes");
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc wifi enable");
                    //client.Sleep(5000);



                    client.SetDevice(t3);
                    client.Sleep(3000);
                    libFunctions.HoldCallFloorWithDuration(client, 1);



                    client.SetDevice(t1);
                    client.Run("adb shell svc wifi disable");
                    client.Sleep(3000);
                    client.Run("adb shell svc wifi enable");
                    client.Sleep(9000);

                    libFunctions.ExpandVideoCall(client);
                    client.Sleep(4000);


                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("MCVidecallEnd"), 0, 1);
                        Console.WriteLine("Video Call::::" + i);

                    }
                    else
                    {
                        Console.WriteLine("Unable to end video Call::::" + i);
                        //adboutput = client.GetDeviceLog();
                        //client.GenerateReport();
                        //client.GetDevicesInformation();

                        //client.Run("adb logcat-v time>adbfile.txt");
                        //Assert.Fail();
                    }
                }
                else if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CloseAlerts"), 0, 1);
                    Console.WriteLine("Video Call Origination Failed" + i);
                }
            }
        }

        public void MCHSCalls()
        {
            client = new Client(host, port);
            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            //GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            //client.SetDevice(t2);
            //client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);

            //My Actual Function
            libFunctions = new Call();
            for (int i = 1; i <= 1000; i++)
            {
                client.SetDevice(t1);
                libFunctions.OriginateCallFromLMRContactsList(client, "Syam_004");
                client.Sleep(3000);
                client.SetDevice(t3);
                if (libFunctions.verifyHookAcceptButton(client))
                {
                    libFunctions.ReceiveCall(client);
                    client.Sleep(3000);
                    libFunctions.HoldCallFloorWithDuration(client, 3);
                }
                else
                {
                    Console.Write("HSCall Not Found");

                }
                client.Sleep(3000);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("EndCall"), 0))
                {
                    libFunctions.EndCall(client);
                }
            }

        }

        // PTX Starts



        public void PTX()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctionsPTX = new BravoPToX();
            lmr = new LMR();
            client.SetDevice(t1);
            Helper.Instance().Wait(1000);
            bravo.PushTOXMessage(client);

            for (int i = 1; i <= 100; i++)
            {
                bravo.PushTOXSendTextToMessageBody(client, "Syam_Implicit:" + i);
                bravo.PushTOXSend(client);

                //PTX Video Send//
                //bravo.PushTOXFileAttachmentFrom(client, "camera");
                //bravo.AttachmentFromGallery(client, "VideoGallery");
                if (i == 1 || i == 5)
                {
                    client.SetDevice(t2);
                    Helper.Instance().Wait(1000);
                    //client.Click("WEB", GlobalHelper.GetObject("HambergerIcon"), 0, 1);
                    //Helper.Instance().Wait(1000);
                    //client.Click("WEB", GlobalHelper.GetObject("History"), 0, 1);
                    Helper.Instance().Wait(1000);
                    //client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0, 1);
                    if (bravo.PushToXVerifyIncomingTextMessage(client, "Syam_Implicit:" + i))
                    {
                        Console.WriteLine("Messages are receiving at terminator");
                    }
                    client.SetDevice(t1);
                    Helper.Instance().Wait(1000);
                }

                Helper.Instance().Wait(5000);
                ///PTX Image Send//
                bravo.PushTOXFileAttachmentFrom(client, "camera");
                bravo.AttachmentFromGallery(client, "pics");
                Helper.Instance().Wait(3000);

                //PTX VM recording
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("PTXVoiceRecordIcon"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("PTXVoiceRecordIcon"), 0, 1);
                    bravo.VoiceMessageRecord(client, 5000);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("PtXSave"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("PtXSave"), 0, 1);
                    }

                }

                bravo.PushTOXFileAttachmentFrom(client, "location");
                client.WaitForElement("WEB", GlobalHelper.GetObject("ShareLocationIcon"), 0, 3000);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("ShareLocationIcon"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("ShareLocationIcon"), 0, 1);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("EnterQuickText"), 0))
                    {
                        Console.WriteLine("Location sent successfully");
                    }
                    else
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                }
                else
                {
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Share Location not found");
                }
                //bravo.PushTOXFileAttachmentFrom(client, "camera");
                //bravo.AttachmentFromGallery(client, "VideoGallery");


            }
        }
        public void PTXBackUp()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctionsPTX = new BravoPToX();
            lmr = new LMR();
            BravoPToX bravo = new BravoPToX();
            client.SetDevice(t1);
            Helper.Instance().Wait(1000);
            bravo.PushTOXMessage(client);

            for (int i = 1; i <= 100; i++)
            {
                bravo.PushTOXSendTextToMessageBody(client, "Syam_Implicit:" + i);
                bravo.PushTOXSend(client);

                //PTX Video Send//
                //bravo.PushTOXFileAttachmentFrom(client, "camera");
                //bravo.AttachmentFromGallery(client, "VideoGallery");
                if (i == 1 || i == 5)
                {
                    client.SetDevice(t2);
                    Helper.Instance().Wait(1000);
                    //client.Click("WEB", GlobalHelper.GetObject("HambergerIcon"), 0, 1);
                    //Helper.Instance().Wait(1000);
                    //client.Click("WEB", GlobalHelper.GetObject("History"), 0, 1);
                    Helper.Instance().Wait(1000);
                    //client.Click("WEB", GlobalHelper.GetObject("GoHistoryDetailsTrue"), 0, 1);
                    if (bravo.PushToXVerifyIncomingTextMessage(client, "Syam_Implicit:" + i))
                    {
                        Console.WriteLine("Messages are receiving at terminator");
                    }
                    client.SetDevice(t1);
                    Helper.Instance().Wait(1000);
                }

                Helper.Instance().Wait(5000);
                ///PTX Image Send//
                bravo.PushTOXFileAttachmentFrom(client, "camera");
                bravo.AttachmentFromGallery(client, "pics");
                Helper.Instance().Wait(3000);

                //PTX VM recording
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("PTXVoiceRecordIcon"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("PTXVoiceRecordIcon"), 0, 1);
                    bravo.VoiceMessageRecord(client, 5000);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("PtXSave"), 0))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("PtXSave"), 0, 1);
                    }

                }

                bravo.PushTOXFileAttachmentFrom(client, "location");
                client.WaitForElement("WEB", GlobalHelper.GetObject("ShareLocationIcon"), 0, 3000);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("ShareLocationIcon"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("ShareLocationIcon"), 0, 1);
                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("EnterQuickText"), 0))
                    {
                        Console.WriteLine("Location sent successfully");
                    }
                    else
                    {
                        Helper.Instance().GoBackByClickingBackIcon(client);
                    }
                }
                else
                {
                    Helper.Instance().GoBackByClickingBackIcon(client);
                    Console.WriteLine("Share Location not found");
                }
                //bravo.PushTOXFileAttachmentFrom(client, "camera");
                //bravo.AttachmentFromGallery(client, "VideoGallery");


            }
        }


        public void HS_PoC_Stability_PTTCalls()
        {

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            LMR lmr = new LMR();

            for (int i = 1; i < 100; i++)
            {
                lmr.GotoContactsList(client);
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i % 2 == 0)
                {
                    CallSecondContact(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }
                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
                else
                {
                    libFunctions.CallFirstContact(client);
                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        libFunctions.HoldCallFloorWithDuration(client, 9000);
                    }

                    client.SetDevice(t1);
                    libFunctions.EndCall(client);
                    client.Sleep(3000);
                    Helper.Instance().ClickOkIfOkExits(client);
                }
            }
        }

        ////MC SFD Calls
        public void MCSFDCall1()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();

            LMR lmr = new LMR();
            lmr.GotoContactsList(client);
            for (int i = 1; i < 100; i++)
            {
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i % 2 == 0)
                {
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);

                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.SetDevice(t1);
                        if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                        {
                            client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);

                        }

                        client.Sleep(3000);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        Helper.Instance().ClickOkIfOkExits(client);

                    }
                }
                else
                {
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.SetDevice(t1);
                        client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                        client.Sleep(3000);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        Helper.Instance().ClickOkIfOkExits(client);

                    }
                }
            }



        }

        public void MCSFDCall232()
        {

            client = new Client(host, port);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();

            LMR lmr = new LMR();
            lmr.GotoContactsList(client);
            for (int i = 1; i < 110; i++)
            {
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i % 2 == 0)
                {
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);

                    client.SetDevice(t2);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Sleep(3000);
                        client.Run("adb shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb  shell svc wifi enable");
                        client.Sleep(3000);

                        client.SetDevice(t1);
                        if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                        {
                            client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);

                        }

                        client.Sleep(30000);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        Helper.Instance().ClickOkIfOkExits(client);

                    }
                }
                else
                {
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Run("adb  shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb shell svc wifi enable");
                        client.Sleep(3000);
                        client.SetDevice(t1);
                        if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                        {
                            client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                        }
                        client.Sleep(30000);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        Helper.Instance().ClickOkIfOkExits(client);
                        //Helper.Instance().SelfEmergency(client);
                        //Helper.Instance().CancelSelfEmergency(client);
                    }
                }
            }



        }

        public void MCSFDCall2()
        {


            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();

            LMR lmr = new LMR();
            lmr.GotoContactsList(client);
            for (int i = 1; i < 2; i++)
            {
                //client.Click("WEB", GlobalHelper.GetObject("PtXClickFirstContact"), 0, 1);
                if (i > 0)
                {
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 0);
                    client.Sleep(3000);
                    client.TouchUp();
                    if (sfdElement(client))
                    {
                        client.Sleep(5000);
                        if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                        {
                            client.SetDevice(t2);
                            if (libFunctions.verifyHookAcceptButton(client))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                                client.Sleep(3000);
                                client.Run("adb shell svc wifi disable");
                                client.Sleep(3000);
                                client.Run("adb shell svc data disable");
                                client.Sleep(3000);
                                client.Run("adb  shell svc data enable");
                                client.Sleep(3000);
                                client.Run("adb  shell svc wifi enable");
                                client.Sleep(3000);
                                client.SetDevice(t1);

                                if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
                                {
                                    client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    lmr.GotoContactsList(client);
                                }
                                else
                                {
                                    Helper.Instance().ClickOkIfOkExits(client);
                                    lmr.GotoContactsList(client);
                                }
                                client.Sleep(9000);
                            }
                            else
                            {
                                client.SetDevice(t1);
                                Helper.Instance().ClickOkIfOkExits(client);
                                lmr.GotoContactsList(client);
                            }
                        }
                        else
                        {
                            Console.WriteLine("SFD Call icon was not found");
                            Helper.Instance().ClickOkIfOkExits(client);
                            lmr.GotoContactsList(client);

                        }
                    }
                    else
                    {
                        Console.WriteLine("SFD Call icon was Failed and cleared the screen");
                        Helper.Instance().ClickOkIfOkExits(client);
                        lmr.GotoContactsList(client);
                    }
                }
                else
                {
                    client.TouchDown("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1);
                    client.Sleep(3000);
                    client.TouchUp();
                    sfdElement(client);
                    client.SetDevice(t3);
                    if (libFunctions.verifyHookAcceptButton(client))
                    {
                        client.Click("WEB", GlobalHelper.GetObject("HookAccept"), 0, 1);
                        client.Run("adb  shell svc wifi disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data disable");
                        client.Sleep(3000);
                        client.Run("adb shell svc data enable");
                        client.Sleep(3000);
                        client.Run("adb shell svc wifi enable");
                        client.Sleep(3000);
                        client.SetDevice(t1);
                        client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                        client.Sleep(30000);
                    }
                    else
                    {
                        client.SetDevice(t1);
                        Helper.Instance().ClickOkIfOkExits(client);

                    }
                }
            }



        }

        //[TestCategory("MCE"),Priority(2020),TestMethod()]

        public void MCEmergencyTC1()
        {
            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0))
            {
                for (int i = 1; i <= 100; i++)
                {

                    try
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception catched");

                    }

                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyDeclare"), 0))
                    {
                        client.ClickCoordinate(10, 800, 1);
                        SelfEmergency(client);
                        //libFunctions.HoldCallFloorWithDuration(client, 9000);

                        client.SetDevice(t2);
                        try
                        {
                            if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            {
                                Console.WriteLine("Emergency Call is received on Device2");
                            }
                            else
                            {
                                Helper.Instance().ClickOnDismiss(client);

                            }

                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception in getting number of users in emergency Device2");
                            clearAlerts(client);
                            //if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            //{
                            //  Console.WriteLine("Emergency Call is received on Device2");
                            //libFunctions.HoldCallFloorWithDuration(client, 5000);

                            //}
                        }


                        client.SetDevice(t3);
                        try
                        {
                            if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            {
                                Console.WriteLine("Emergency Call is received on Device2");
                            }
                            else
                            {
                                Helper.Instance().ClickOnDismiss(client);

                            }

                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception in getting number of users in emergency Device3");
                            clearAlerts(client);
                            //if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            //{
                            //  Console.WriteLine("Emergency Call is received on Device3");
                            //}
                        }


                        client.SetDevice(t1);

                        client.TouchDown("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0))
                        {
                            client.ClickCoordinate(10, 800, 1);
                            client.Sleep(10000);
                            CancelSelfEmergency(client);
                        }
                        else
                        {
                            Console.WriteLine("Client is not in emergency state");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Failed to declare emergency state in loop");
                        client.ClickCoordinate(10, 800, 1);
                        clearAlerts(client);
                        Helper.Instance().GetContextMenu(client, GlobalHelper.GetObject("EmergencyIcon"));
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0))
                        {
                            client.ClickCoordinate(10, 800, 1);
                            CancelSelfEmergency(client);
                        }

                    }
                }

            }
            else
            {
                Console.WriteLine("Failed to declare emergency state");
                client.ClickCoordinate(10, 800, 1);

                Helper.Instance().ClickOnDismiss(client);
                Helper.Instance().ClickOkIfOkExits(client);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CallText"), 0, 1);

                }
                else
                {
                    Console.WriteLine("some alert present in the FG");
                }
            }



        }

        //[TestCategory("MCE"), Priority(2020), TestMethod()]

        public void MCEmergencyTC2()
        {
            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0))
            {
                for (int i = 1; i <= 100; i++)
                {

                    try
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception catched");

                    }

                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyDeclare"), 0))
                    {
                        client.ClickCoordinate(10, 800, 1);
                        SelfEmergency(client);
                        //libFunctions.HoldCallFloorWithDuration(client, 9000);

                        client.SetDevice(t2);
                        try
                        {
                            if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            {
                                Console.WriteLine("Emergency Call is received on Device2");
                                Console.WriteLine("Emergency Call is received on Device2");
                                client.Run("adb shell svc wifi disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data enable");
                                client.Sleep(5000);
                                client.Run("adb shell svc wifi enable");
                            }
                            else
                            {
                                Helper.Instance().ClickOnDismiss(client);

                            }

                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception in getting number of users in emergency Device2");
                            clearAlerts(client);
                            //if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            //{
                            //  Console.WriteLine("Emergency Call is received on Device2");
                            //libFunctions.HoldCallFloorWithDuration(client, 5000);

                            //}
                        }


                        client.SetDevice(t3);
                        try
                        {
                            if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            {
                                Console.WriteLine("Emergency Call is received on Device2");
                                client.Run("adb shell svc wifi disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data enable");
                                client.Sleep(5000);
                                client.Run("adb shell svc wifi enable");
                            }
                            else
                            {
                                Helper.Instance().ClickOnDismiss(client);

                            }

                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception in getting number of users in emergency Device3");
                            clearAlerts(client);
                            //if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            //{
                            //  Console.WriteLine("Emergency Call is received on Device3");
                            //}
                        }


                        client.SetDevice(t1);

                        client.TouchDown("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0))
                        {
                            client.ClickCoordinate(10, 800, 1);
                            client.Sleep(10000);
                            CancelSelfEmergency(client);
                        }
                        else
                        {
                            Console.WriteLine("Client is not in emergency state");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Failed to declare emergency state in loop");
                        client.ClickCoordinate(10, 800, 1);
                        clearAlerts(client);
                        Helper.Instance().GetContextMenu(client, GlobalHelper.GetObject("EmergencyIcon"));
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0))
                        {
                            client.ClickCoordinate(10, 800, 1);
                            CancelSelfEmergency(client);
                        }

                    }
                }

            }
            else
            {
                Console.WriteLine("Failed to declare emergency state");
                client.ClickCoordinate(10, 800, 1);

                Helper.Instance().ClickOnDismiss(client);
                Helper.Instance().ClickOkIfOkExits(client);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CallText"), 0, 1);

                }
                else
                {
                    Console.WriteLine("some alert present in the FG");
                }
            }



        }

        //[TestCategory("MCE"), Priority(2020), TestMethod()]
        public void MCEmergencyTC3()
        {
            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName3");
            client.SetDevice(t3);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName2");
            client.SetDevice(t2);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);
            libFunctions = new Call();
            if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0))
            {
                for (int i = 1; i <= 100; i++)
                {

                    try
                    {
                        client.TouchDown("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                    }
                    catch (Exception ce)
                    {
                        Console.WriteLine("Exception catched");

                    }

                    if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyDeclare"), 0))
                    {
                        client.ClickCoordinate(10, 800, 1);
                        SelfEmergency(client);

                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0))
                        {
                            client.Click("WEB", GlobalHelper.GetObject("MCVideoCallIcon"), 0, 1);
                            client.ClickCoordinate(10, 800, 1);

                        }

                        client.SetDevice(t2);
                        try
                        {
                            if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0, 1);
                                client.ClickCoordinate(10, 800, 1);
                            }
                            if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            {
                                Console.WriteLine("Emergency Call is received on Device2");
                                client.Run("adb shell svc wifi disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data enable");
                                client.Sleep(5000);
                                client.Run("adb shell svc wifi enable");
                            }
                            else
                            {
                                Helper.Instance().ClickOnDismiss(client);

                            }

                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception in getting number of users in emergency Device2");
                            clearAlerts(client);
                            //if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            //{
                            //  Console.WriteLine("Emergency Call is received on Device2");
                            //libFunctions.HoldCallFloorWithDuration(client, 5000);

                            //}
                        }


                        client.SetDevice(t3);
                        try
                        {
                            if (client.IsElementFound("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0))
                            {
                                client.Click("WEB", GlobalHelper.GetObject("MCVideoCallAcccept"), 0, 1);
                                client.ClickCoordinate(10, 800, 1);

                            }
                            if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            {

                                Console.WriteLine("Emergency Call is received on Device2");
                                client.Run("adb shell svc wifi disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data disable");
                                client.Sleep(5000);
                                client.Run("adb shell svc data enable");
                                client.Sleep(5000);
                                client.Run("adb shell svc wifi enable");
                            }
                            else
                            {
                                Helper.Instance().ClickOnDismiss(client);

                            }

                        }
                        catch (Exception ce)
                        {
                            Console.WriteLine("Exception in getting number of users in emergency Device3");
                            clearAlerts(client);
                            //if (Helper.Instance().NoOfUsersInEmergency(client) > 0)
                            //{
                            //  Console.WriteLine("Emergency Call is received on Device3");
                            //}
                        }


                        client.SetDevice(t1);

                        client.TouchDown("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0);
                        client.Sleep(3000);
                        client.TouchUp();
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0))
                        {
                            client.ClickCoordinate(10, 800, 1);
                            client.Sleep(10000);
                            CancelSelfEmergency(client);
                        }
                        else
                        {
                            Console.WriteLine("Client is not in emergency state");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Failed to declare emergency state in loop");
                        client.ClickCoordinate(10, 800, 1);
                        clearAlerts(client);
                        Helper.Instance().GetContextMenu(client, GlobalHelper.GetObject("EmergencyIcon"));
                        if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0))
                        {
                            client.ClickCoordinate(10, 800, 1);
                            CancelSelfEmergency(client);
                        }

                    }
                }

            }
            else
            {
                Console.WriteLine("Failed to declare emergency state");
                client.ClickCoordinate(10, 800, 1);

                Helper.Instance().ClickOnDismiss(client);
                Helper.Instance().ClickOkIfOkExits(client);
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("CloseAlerts"), 0))
                {
                    client.Click("WEB", GlobalHelper.GetObject("CallText"), 0, 1);

                }
                else
                {
                    Console.WriteLine("some alert present in the FG");
                }
            }



        }


        //[TestMethod]
        public void MCUPM1()
        {
            GlobalHelper.TargetType = GlobalHelper.InputFromXML("DeviceName1");
            client.SetDevice(t1);
            client.Launch(GlobalHelper.InputFromXML("AndroidPackageName") + "/.StartupActivity", true, true);

            Helper.Instance().WaitForSpinner(client);
            client.Sleep(15000);

            try
            {
                client.Click("WEB", GlobalHelper.GetObject("More"), 0, 1);
            }
            catch
            {
                if (!GlobalHelper.InputFromXML("T1ClientType").Contains("14"))
                {
                    client.ClickCoordinate(client.P2cx(8), client.P2cy(9), 1);
                }
            }
            if (client.IsElementFound("WEB", "xpath=//*[@text='Switch profile' and @onScreen='true' and @top='true']", 0))
            {
                client.Click("WEB", "xpath =//*[@text='Switch profile' and @onScreen='true' and @top='true']", 0, 1);
                Helper.Instance().Wait(5000);

                string arr = client.GetText("WEB");
                Console.WriteLine(arr);

            }
            else
            {
                Console.WriteLine("Switch role not found in hamburger menu");
            }
        }




        [TestCleanup()]
        public void TearDown()
        {
            try
            {
                client.GenerateReport(true);
                client.ReleaseClient();
                Console.WriteLine("Released the test");
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                client.ReleaseClient();
                client.GenerateReport(true);
            }
        }

        public bool sfdElement(Client client)
        {
            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-pbx-call' and @hidden='false' and @onScreen='true']"))
            {
                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-pbx-call' and @hidden='false' and @onScreen='true']", 0, 1);
                Console.WriteLine("SFD Dial icon found");

                return true;
            }
            else
            {
                Console.WriteLine("SFD Dial not found");
                return false;
            }
        }
        public void stopStreaming(Client client)
        {
            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.video-stop-stream-icon' and @onScreen='true']", 0))
            {
                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.video-stop-stream-icon' and @onScreen='true']", 0, 1);
                Console.WriteLine("Streaming stopped");
            }
            else
            {
                Console.WriteLine("Streaming stop failed");
            }
        }

        public void startStreaming(Client client)
        {
            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.video-start-stream-icon' and @onScreen='true']", 0))
            {
                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.video-start-stream-icon' and @onScreen='true']", 0, 1);
                Console.WriteLine("Streaming started");
            }
            else
            {
                Console.WriteLine("Streaming start failed");
            }
        }

        public void switchCamera(Client client)
        {
            if (client.IsElementFound("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.video-camera-icon' and @onScreen='true']", 0))
            {
                client.Click("WEB", "xpath=//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.video-camera-icon' and @onScreen='true']", 0, 1);
                Console.WriteLine("Switch Camera");

            }
        }

        public void CallSecondContact(Client client)
        {
            bool _mem = client.IsElementFound("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1);

            if (_mem)
            {
                client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 1, 1);
                Console.WriteLine("\n" + "Pass : Presence shown as available for Second contact" + "\n");
                Helper.Instance().Wait(1000);
                //client.SetDefaultClickDownTime(2000);
                client.Click("WEB", GlobalHelper.GetObject("CallReadyScreen"), 0, 1);
                //client.SetDefaultClickDownTime(100);
            }
        }

        public void CallThirdContact(Client client)
        {
            bool _mem = client.IsElementFound("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 2);

            if (_mem)
            {
                client.Click("WEB", "xpath=//*[@nodeName='H1' and @onScreen='true' and @hidden='false']", 2, 1);
                Console.WriteLine("\n" + "Pass : Presence shown as available for Third contact" + "\n");
                Helper.Instance().Wait(1000);
                //client.SetDefaultClickDownTime(2000);
                client.Click("WEB", GlobalHelper.GetObject("CallReadyScreen"), 0, 1);
                //client.SetDefaultClickDownTime(100);
            }
        }

        public void clearAlerts(Client client)
        {
            for (int i = 1; i <= 3; i++)
            {
                if (Helper.Instance().ClickOnDismiss(client) == 1)
                {
                    Console.WriteLine("Alert Dismissed");

                }
                else if (Helper.Instance().ClickOkIfOkExits(client) == 1)
                {
                    Console.WriteLine("Alert OK");
                }
                else
                {
                    Helper.Instance().ClosePopUP(client);
                    Console.WriteLine("Alert MCA/IPA");
                }
            }

        }

        public int CancelSelfEmergency(Client client)
        {
            if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0))
            {
                Helper.Instance().GetContextMenu(client, GlobalHelper.GetObject("EmergencyIcon"));
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("Spinner"), 0))
                {
                    Console.WriteLine("Element Found in the screen");
                }
                else
                {
                    client.ElementSwipe("WEB", GlobalHelper.GetObject("EmergencyCancel"), 0, "Left", 100, 1000);
                }
            }
            else
                return 0;
            if (client.IsElementFound("WEB", GlobalHelper.GetObject("Send"), 0))
                client.Click("WEB", GlobalHelper.GetObject("Send"), 0, 1);
            else
                return 0;
            Helper.Instance().WaitForSpinner(client);

            //if (!GlobalHelper.InputFromXML("TestSuite").ToLower().Contains("lmr"))

            //{
            //GoBackByClickingBackIcon(client);
            //}
            return 1;
        }

        public int SelfEmergency(Client client)
        {

            if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyIcon"), 0))
            {
                Helper.Instance().GetContextMenu(client, GlobalHelper.GetObject("EmergencyIcon"));
                if (client.IsElementFound("WEB", GlobalHelper.GetObject("EmergencyDeclare"), 0))
                {

                    client.ElementSwipe("WEB", GlobalHelper.GetObject("EmergencyDeclare"), 0, "Left", 100, 1000);
                }
                Helper.Instance().WaitForSpinner(client);
                Console.WriteLine("Emergency declared properly");

                return 1;
            }
            else
            {
                Console.WriteLine("Emergency not declared properly");
                return 0;
            }
        }

        public void endsfdCall(Client client)
        {
            if (client.IsElementFound("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0))
            {
                client.Click("WEB", "xpath =//*[@css='SPAN.x-button-icon.x-font-icon.x-shown.ico-callEnd' and @onScreen='true']", 0, 1);
                Helper.Instance().ClickOkIfOkExits(client);
                Helper.Instance().GoBackByClickingBackIcon(client);
            }
        }

        public void selectProfile(Client client)
        {
            client.WaitForElement("WEB", "xpath=//*[@text='Default MCPTT User Profile']", 0, 20000);
            client.Click("WEB", "xpath=//*[@text='Select']", 0, 1);
        }


        public void secondCallFromHistoryDetail(Client client)
        {
            History his = new History();

            client.Click("WEB", GlobalHelper.GetObject("HistoryMember"), 1, 1);

            client.Click("WEB", GlobalHelper.GetObject("CallReadyScreen"), 0, 1);

        }

        //end class method
    }
}
